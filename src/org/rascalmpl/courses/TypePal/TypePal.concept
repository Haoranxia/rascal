# TypePal: Name and Type Analysis Made Easy 

.Synopsis
TypePal is a framework for name analysis, type checking and type inference

.Usage

.Details
ConceptsAndDefinitions Architecture Reporting Collector Solver Configuration

.Description
Many type checkers have already been written in Rascal with good results. However, type checkers for different languages have a lot in common and address similar
questions:

* How to handle declarations of names, in particular their scope and uses?
* How to distinguish the roles names can play, e.g., names of functions, data types, labels, constants or variables?
* How to handle imports and multiple name spaces?
* How to associate requirements/constraints relevant for type checking with the syntax definition of the language being type checked?
* How to represent the types that occur in a program?
* How to handle global or local type inference?
* How to give precise error messages (and avoid spurious messages)?
* How to extract information that is useful for later compiler stages or the IDE for, 
  e.g., code generation, use-def information or name completion?

TypePal is a declarative framework that operates on a model of the analysed program consisting of 

* _facts_ about source code fragments with known type (e.g., an integer literal is of type integer);
* _requirements_ that are imposed on a source code fragment by the type system being used; 
  a requirement may need the types of one or more other source code fragments, 
  e.g., if the expression on the right-hand side of an assignment has type integer,
  then the type of the variable on the left-hand side should be compatible with the type integer;
* _calculators_ that compute the type of a source code fragment;  
  this computation may also need the types of one or more other source code fragments,
  e.g., compute the type of the addition operator based on the types of its operands.
  
We will call this model the _TModel_ (for "Type Model") of the program: facts describe elementary observations,
requirements impose restrictions on the types of program fragments, and calculators compute new types.
A requirement or calculator may detect a type violation and will then generate an error message. 
When a requirement is satisfied or a calculator computes a new type, 
this leads to the creation of new facts that may trigger the computation of other requirements and calculators.

Technically, TypePal uses _scope graphs_ for expressing definition and use of names (including their role, scope, name space, and visibility),
and _constraints_ to describe facts, requirements and calculators. 
These constraints are such that they can express either type checking or type inference, or a mixture thereof.
Under the hood, these constraints are solved in an efficient, data-driven, fashion.

The TypePal framework is highly parameterized and can be adapted to specific type checking needs.

.Examples


.Benefits

.Pitfalls
