# Concepts and Definitions

.Synopsis
The concepts and definitions used in TypePal.

== Identifier
The syntax of a source language may impose various restrictions on the identifiers 
that can occur in a program. They amount to including or excluding specific characters 
for various occurrences of names in the program. One example is the requirement in Java that class names
start with an upper case letter. TypePal is agnostic of such conventions and represents 
each name as a string. _Qualified names_ are also supported and are represented by a list of strings.

== Tree

The Rascal data type `Tree` (REF) is used to represent all parse trees that can be generated for any syntax described in Rascal.
`Tree` is also a super type of any syntactic construct that may occur in a parse tree. In TypePal we interchangeably use `Tree` and the source area
(a source location) from it has been derived to uniquely 
identify program parts, definitions, uses and scopes.

== Scope
A _scope_ is a region of a program that delimits where the definition of an identifier is applicable.
An identifier is defined in the scope where it is defined and in all nested subscopes, unless one of these subscopes
redefines that same identifier. In that case, the inner definition applies inside that nested scope (and its subscopes).
Scopes are represented by the subtree of the parse tree that corresponds to their textual extent.
Examples of scopes are a module or function scope.

== Scope Graph
The scope graph is one of the the oldest method to describe the scope of names in a program.
We use a version of scope graphs as described by Kastens & Waite, Name analysis for modern languages: a general solution, SP&E, 2017.
This model uses text ranges in the source text (happily represented by Rascal's `loc` data type) to identify 
and define all aspects of names. 
A scope graph provides lookup operations on names that takes both syntactic nesting and semantic linking (via paths) into account,
as well as the specific roles of identifiers and paths (described below).

== Path
TypePal is based on scope graphs that are not only based on syntactic containment of scopes but can also express semantic 
connections between parse trees.
While scopes are strictly determined by the hierarchical structure of a program (= parse tree),
_paths_ provide an escape from this restriction and define a semantic connection between syntactic 
entities that are not hierarchically related and may even be part of different syntax trees.
Connections between syntactic entities are labelled path, with user-defined labels.
An example is the import of a module _M_ into another module _N_ that makes the entities in _M_ known inside _N_.
Here is an example of a path label to mark an import path between two parse trees.

[source,rascal]
----
data PathLabel
    = importsLabel()
    ;
----
Paths are, amongst others, used in the resolution of qualified names.

== Name Resolution
Name resolution is based on the principle: __syntactic resolution first, semantic resolution second__.
This means that we first search for a definition in the current parse tree and only when that fails 
we follow semantic path to other trees (either in the current tree or in other trees):

* First the current scope in which the name is used is searched for a definition.
* If this fails surrounding scopes are searched.
* If this fails semantic paths in the same parse tree or to other parse trees are searched, such as, for instance, 
  provided by an import statement.

This is illustrated below, where a name occurrence _O_ 
can be resolved to definitions _D1_ (syntactic resolution), _D2_ (semantic resolution) and/or _D3_ (semantic resolution).

image::NameResolution.png[400,400,align="center"]

IMPORTANT: Name resolution need not have a unique solution. 
Therefore the author can extend TypePal by writing functions to 
(a) filter valid solutions; (b) determine which identifiers may be overloaded.

== Role

Identifiers, scopes and path can play different _roles_ that determine how they will be handled.

=== Identifier Role

Identifier roles are modelled by the data type `IdRole` that has to be extended by the author of the typechecker.
Here is an example where roles are introduced for constants, variables, formal parameters and functions:

[source,rascal]
----
data IdRole
    = constantId()
    | variableId()
    | formalId()
    | functionId()
    ;
----

When _defining_ an identifier, the specific role of that identifier has to be given, e.g. as `constantId()`.
When _using_ an identifier, the set of acceptables roles has to be given. For instance, an identifier
used in an expression may accept the roles `{ constantId(), variableId(), formalId() }`.

=== Scope Role

Scope roles are modelled by the data type `ScopeRole` and are used to distinguish different kinds of scopes.
Later (REF) we will see that this can be used, for instance, to search for the innermost scope with a specific role,
say the innermost function scope. Here is an example that introduces scopes for functions and loops:

[source,rascal]
----
data ScopeRole
    = functionScope()
    | loopScope()
    ;
----

=== Path Role
Path roles are modelled by the data type `PathRole`:

[source,rascal]
----
data PathRole
    = importPath()
    | extendPath()
    ;
----

== Types
The type to be associated with names varies widely for different programming languages and has to be provided by the typechecker author.
TypePal provides the data type `AType` that has to be extended for the language to be defined:

[source,rascal]
----
data AType
   = tvar(loc name)                                //<1>
   | atypeList(list[AType] atypes)                 //<2>
   | overloadedAType(rel[Key, AType] overloads)    //<3>
   | lazyLub(list[AType] atypes)                   //<4>
   ;
----

<1> `tvar` represents a type variable (used for type inference) and is only used internally. 
<2> `atypeList` represents a list of `AType`s and is used both internally in TypePal but can also be used in typechecker definitions.
<3> `overloadedAType` represents overloaded types.
<4>  `lazyLub` represents a lazily computed LUB of a list of types.

The typechecker author has to provide a function to convert `AType`s to string (it is used create readable error messages):
[source,rascal]
----
str prettyPrintAType(AType atype);
----

== DefInfo

When defining a name, we usually want to associate information with it such as the type of the defined name.
TypePal provides the data type `DefInfo` for this purpose:

[source,rascal]
----
data DefInfo
    = noDefInfo()                                       //<1>
    | defInfo(AType atype)                              //<2>
    | defInfo(list[Tree] dependsOn, AType() getAType)   //<3>
    ;
----
<1> No information associated with definition.
<2> Explicitly given AType associated with definition.
<3> Type of definition depends on the type of the entities given in `dependsOn`, when those are known, 
    `getAType` can construct the type of this definition. `getAType` will only be called by TypePal during constraint solving.

