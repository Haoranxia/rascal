# TypePal Configuration
  
.Synopsis
Configuration options for TypePal

.Description

TypePal provides configuration options for

* _Name Resolution & Overloading_: configures how names are resolved and which overloading is allowed.
* _Operations on Types_: configures how operations like subtype and least-upper-bound (lub) are defined.
* _Retrieval of Types_: configures how named and structured types are handled.
* _Extension Points_: configures operations before an after solving.
* _Miscellaneous_: utility functions that can be configured.

Here is an overview:

image::TypePalConfig.png[800,600,align="center"]

The TypePal configuration can provide additional declarations for:

* _Name Resolution & Overloading_:
  ** `isAcceptableSimple`: accepts or rejects a proposed definition for the use of a simple name in a particular role. Typical concerns are:
     *** enforce definition before use;
     *** check access rights, e.g. visibility.
  ** `isAcceptableQualified`: accepts or rejects a proposed definition for the use of a qualified name in a particular role.
  ** `isAcceptablePath`: accepts or rejects an proposed access path between use and definition.
  ** `mayOverload`: determines whether two names are allowed to be overloaded.

* _Operations on Types_:
  ** Functions to check subtype (`isSubType`) and least upperbound (`getLub`) of two types.
  ** Functions that given the smallest (`getMinAType`) and largest (`getMaxAType`) element of the type lattice.
  ** The function `instantiateTypeParameters` defines language-specific instantiation of type parameters.
  
* _Retrieval of Types_:

* _Miscellaneous_:
  ** A function _unescapeName_ to define language-specific escape rules for names.

* _Extension Points_:
    
  ** A function `preSolver` that can enrich or transform the TModel before the Solver is applied to it.
  ** A function `postSolver` that can enrich or transform the TModel after constraint solving is complete.