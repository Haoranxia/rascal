# Solver

.Synopsis
A Solver tries to solve the constraints in a TModel; unsolved constraints produce error messages

.Description
Recall that requirements and calculators use function parameters of the respective types `void(Solver s) predicates` and
`AType(Solver s) calculator`. Although this are ordinary Rascal functions it is useful to summarize the TypePal-specific
functions that can be used inside these functions:


image::Solver.png[800,600,align="center"]


In identical style as used for <Collector>>, `Solver` is a datatype with a single constructur and with a number of functions as fields,
For instance, given a  `Solver` named `s`, calling the `getType` function amounts to: `s.getType(argument-of-getType)`.
All Solver functions are prefixed with `/* Solver field */` to emphasize that they
are a field of the Solver datatype.

The result of the Solver is an enriched `TModel` that contains, amongst others, messages regarding violated requirements
or types that could not be computed.
It can also be used to generate other usefull information about the program such as a use-def relation and
the used vocabulary (used for name completion).

== Types
The workhorse of TypePal is the function `getType` that determines the type of given tree or source location.
When that is known, it is returned as value.
If it is not known, the internal exception `TypeUnavailable()` is thrown which will abort the execution of the
current requirement or calculator which will be tried later again.

[source,rascal]
----
/* Solver field */ AType(value) getType
/* Solver field */ AType (str id, loc scope, set[IdRole] idRoles) getTypeInScope
/* Solver field */ AType (AType containerType, Tree selector, set[IdRole] idRolesSel, loc scope) getTypeInType
/* Solver field */ set[AType] (AType containerType, loc scope) getAllTypesInType
----

For convenience, `onError` is available both for Tree and loc arguments;

== Require & Calculate

=== equal and requireEqual
The function `equal` determines whether `t1` and `t2` are equal, the result is a Boolean value.
The function `requireEqual` just returns when the outcome is true, otherwise the FailMessage is generated.

[source,rascal]
----
/* Solver field */ bool (value, value) equal
/* Solver field */ void (value, value, FailMessage) requireEqual
----

=== subtype and requireSubtype
The function `subtype` determines whether `t1` is a subtype of `t2`.
Under the hood, the user-provided function `getSubType` is called, see <<Typepal Configuration>>.
The function `requireSubtype` just returns when the outcome is true, otherwise the FailMessage is generated.

[source,rascal]
----
/* Solver field */ bool (value, value) subtype
/* Solver field */ void (value, value, FailMessage) requireSubtype
----

=== comparable and requireCompare
The function `comparable` determines whether `t1` is comparable with `t2`.
Under the hood, the user-provided function `getSubType` is called twice, see <<Typepal Configuration>>.
The function `requireComparable` just returns when the outcome is true, otherwise the FailMessage is generated.

[source,rascal]
----
/* Solver field */ bool (value, value) comparable
/* Solver field */ void (value, value, FailMessage) requireComparable
----

=== unify and requireUnify
The function `unify` determines whether `t1` can be unified with `t2`.
Under the hood, the user-provided functions `getSubType` and `getLub` are used, see <<Typepal Configuration>>.
The function `requireUnify just returns when the outcome is true, otherwise the FailMessage is generated.
The bindings that may result from unification are effectutated when the enclosing calculate or require succeeds.

[source,rascal]
----
/* Solver field */ bool (value, value) unify
/* Solver field */ void (value, value, FailMessage) requireUnify
----

=== requireTrue and requireFalse
The function `requireTrue` returns when its condition is true, otherwise the FailMessage is generated.
The function `requireFalse` returns when its condition is false, otherwise the FailMessage is generated.

[source,rascal]
----
/* Solver field */ void (bool, FailMessage) requireTrue
/* Solver field */ void (bool, FailMessage) requireFalse
----

=== lub
The function `lub` return the least upper bound of two types.
Under the hood, the user-provided function `getLub` is called, see <<Typepal Configuration>>.
[source,rascal]
----
/* Solver field */ AType lub(AType t1, AType t2);
----

== Inference
=== instantiate
=== isFullyInstantiated
== Reporting
[source,rascal]
----
/* Solver field */ bool(FailMessage fm) report
/* Solver field */ bool (list[FailMessage]) reports
----

== Global Info
=== getConfig
=== getFacts